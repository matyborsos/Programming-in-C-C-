Problem P.1

    int n;
    scanf("%d", &n);
    char ch = 'A';
    int i, j, ct = 1;
    for( i = 1; i <= n; i++)
    {
	for( j = 1; j <=ct; j++){
	    printf("%c", ch);
              ch++;
          }
          printf("\n");
	ct++;
          ch = 'A';
    }
    return 0;

Problem P.2

#include <stdio.h>

int main() {

    	double d;
    	float f;
  	int i;
   	scanf("%lf", &d);
    	scanf("%f", &f);
    	scanf("%d", &i);
   	double result = d * f * i;
    	printf("%lf\n", result);
    	double *r_ptr;
    	r_ptr = &result;
    	*r_ptr = *r_ptr + 5;
   	printf("%lf\n", result);
    	printf("%lf\n", *r_ptr);
    	return 0;
}   

Problem P.3

#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, *array;
    	FILE *file;
    	scanf("%d", &n);
   	array = (int*) malloc( sizeof(int) * n);
   	if (array == NULL)
   	 	exit (1);
    	int i;
    	for( i = 0; i < n; i++ )
    		scanf("%d", &array[i]);
   	file = fopen("squares.txt", "w");
    	if (file == NULL)
       		exit (1);
   	for( i = n-1; i >= 0; i-- )
        	fprintf(file, "%d %d\n", array[i], array[i] * array[i]);
    	return 0;
} 

Problem P.4

bool passcheck( char *s )
{
    int i = 0, dignr = 0, nrch = 0;
    while( s[i] )
    {
        i++;
        nrch++;
    }
    if( nrch < 8 )
        return false;
    for ( i = 0; i < nrch; i++ )
        if( s[i] >= '0' && s[i] <= '9')
            dignr++;
    if( dignr < 3 )
        return false;
    return true;
}

! passcheck(s);

Problem P.5

bool odd(unsigned char data)
{
    if(data & 1)
         return true;
    else
         return false;
}

Problem P.6

called with par = 4
called with par = 3
called with par = 2
called with par = 1
returning 2
returning 6
returning 24
24

Problem P.7

int substitute_vowels(char *s, char ch)
{
    char *s_ptr = &s[0];
    int i = 0, nr = 0;
    while( s[i] )
    {
        if ( *(s_ptr+i) == 'a' || *(s_ptr+i) == 'e' || *(s_ptr+i) == 'u' || *(s_ptr+i) == 'o' || *(s_ptr+i) == 'i')
            {
                *(s_ptr+i) = ch;
                nr++;
            }
        i++;
    }
    return nr;
}

Problem P.8

void total_time(int mins[], int secs[], int n, int *sum_min, int *sum_sec)
{
    int i;
    *sum_sec = 0;
    *sum_min = 0;
    for( i=0; i< n; i++)
    {
        *sum_sec = *sum_sec + secs[i];
        while(*sum_sec > 59)
        {
            *sum_min = *sum_min + 1;
            *sum_sec  = *sum_sec - 60;
        } 
    }
    for( i=0; i< n; i++)
        *sum_min = *sum_min + mins[i];
}

Problem P.9

    int n;
    char ch;
    scanf("%d", &n);
    getchar();
    scanf("%c", &ch);
    int i, j;
    for( i = 0; i < n; i++ )
    {
        for( j = 0; j <= i; j++)
            printf("%c", ch);
        printf("\n");
        }
    return 0;

Problem P.10

#include <stdio.h>
#include <stdlib.h>

void print_matrix(int **A, int rows, int cols)
{
    int i, j;
    for( i = 1; i <= rows; i++ ) {
        for( j = 1; j <= cols; j++)
            printf("%d ", A[i][j]);
        printf("\n");
    }
}

int main(){
    int n, m, pn, pm, val;
    FILE *file;
    file = fopen("matrix.dat", "r");
    fscanf(file, "%d %d", &n, &m);
    int matrix[n][m];
    int i, j;
    for( i = 1; i <= n; i++ )
        for( j = 1; j <= m; j++)
            matrix[i][j] = 0;
    while( !feof(file) {
            fscanf(file,"%d %d %d", &pn, &pm, &val);
         matrix[pn][pm] = val;
    }
    print_matrix(matrix, n, m);
}

Problem P.11

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node {
    char str[20];
    struct node* next;
};

struct node * insertBegin(struct node * head, char str[])
{       
    struct node * new;
    new = ( struct node *) malloc ( sizeof ( struct node ));
    if( new ==  NULL)
    {
        printf(" Error allocationg memory \n");
        return head;
    }
    strcpy(new -> str, str);
    new -> next  = head;
    return new;
}

void printList(struct node *head)
{
    while( head != NULL )
    {
        printf("%s ", head -> str);
        head = head -> next;
    }
}

void dispose_list ( struct node * my_list ) {
    struct node * nextelem ;
    while ( my_list != NULL ) {
        nextelem = my_list -> next ;
        free ( my_list ) ;
        my_list = nextelem ;
    }
}

int main()
{
    int n;
    char text[20];
    scanf("%d", &n);
    struct node * head = NULL;
    int i;
    for(i = 0; i < n; i++)
    {
        scanf("%s", text);
        head = insertBegin(head, text);
        printList(head);
        printf("\n");
    }
    dispose_list(head);
    return 0;
}

Problem P.12

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

struct river {
    char name[40];
    int length;
    int drainage_area;
};

int my_compare ( const void *va , const void * vb ) {
    const struct river *a = va ;
    const struct river *b = vb ;
    if ( a->length < b->length ) return -1;
    else 
	if ( a->length > b->length ) return 1;
          else return 0;
}

int main() 
{
    FILE *file;
    file = fopen("data.txt", "r");
    struct river rivers[80];
    int n = 0;
    while(!feof(file))
    {
        fscanf(file, "%s %d %d", rivers[n].name, &rivers[n].length, &rivers[n].drainage_area);
        n++;
    }
    int i = 0;
    qsort ( rivers , n, sizeof ( rivers[0]) , my_compare);
    FILE *out;
    out = fopen("output2.txt", "w");
    assert(out!=NULL);
    for (i = 0; i < n ; i ++)
        fprintf (out, "%s %d %d\n", rivers[i].name, rivers[i].length, rivers[i].drainage_area);
    return 0;
}

Problem P.13

#include <stdio.h>
#include <stdlib.h>

struct coffee {
    int id;
    char property;
};

void set_coffee_property(struct coffee* c, const unsigned char property) {
    c -> property |= property;
    return;

   //  c->property = c->property + property;  
}

void unset_coffee_property(struct coffee* c, const unsigned property) {
    c -> property &= ~property;
    return;

    // c->property = c->property - property;  
}

int main() 
{
    const unsigned char regular = 1<<0;
    const unsigned char espresso = 1<<1;
    const unsigned char double_espresso = 1<<2;
    const unsigned char milk = 1<<3;
    const unsigned char cream = 1<<4;
    const unsigned char soy_milk = 1<<5;
    const unsigned char sugar = 1<<6;
    const unsigned char sweetener = 1<<7;
    struct coffee mycoffee;
    mycoffee.id = 1;
    mycoffee.property = 0;
    set_coffee_property(&mycoffee, regular);
    set_coffee_property(&mycoffee, milk);
    set_coffee_property(&mycoffee, sugar);
    int i;
    for (i = 7; i >= 0 ; i --)
        printf("%d", ((mycoffee.property>>i)&1));
    return 0;
}

Problem P.14

#include <stdio.h>
#include <assert.h>

int main() 
{
    short int num1 =  8289;
    short int num2 = 24929;
    FILE *file;
    file = fopen("generate.txt", "w");
    assert(file != NULL);
    int i;
    for( i = 0; i < 10; i++ )
    {
        fwrite(&num1, sizeof(short int), 1, file);
        fwrite(&num2, sizeof(short int), 1, file);
        fprintf(file,"\n");
        num1 = num1 + 1;
        num2 = num2 + 1 + 256;
    }
    return 0;
}

SAU:

#include <stdio.h>
#include <assert.h>
int main(){
    FILE *p=fopen("generate.txt","wb");
    assert(p!=NULL);
    char a[6]="b bb\n";
    for(int i=0; i<10; i++){
        fwrite(a,5,1,p);
        a[0]++;
        a[2]++;
        a[3]++;
    }
    return 0;
}

Problem P.15

class Car {
    private:

        string BrandName;
        string ModelName;
        float price;

    public:

        Car(string BN, string MN, float P)
        {
            BrandName = BN;
            ModelName = MN;
            price = P;
        }
        ~Car(){ cout << "Destructor called!\n"; }
        void SetModelName(string newModelName) { ModelName = newModelName;}

};

Problem P.16

class Car {

    protected:
        string BrandName;
        string ModelName;
        float price;
    public:
        Car(string BN, string MN, float P)
        {
            BrandName = BN;
            ModelName = MN;
            price = P;
        }
        ~Car(){ cout << "Destructor called!\n"; }
        void SetModelName(string newModelName) { ModelName = newModelName;}
};

class Taxi : public Car {

    protected:
        int PassLimit;
    public:
        Taxi(string BN, string MN, float P, int PL) : Car(BN, MN, P) { PassLimit = PL; }
        ~Taxi() { cout << "Destructor called!\n"; }
        void print()
        {
            cout << "My taxi is a " << BrandName << " " << ModelName <<
                " and I paid " << price << " euros for it, also the a limit on the number of passengers it may carry is "
                << PassLimit << "." << endl;
        }

};

int main()
{
    Taxi MyTaxi("500", "2", 3000, 3);
    MyTaxi.print();
    return 0;
}

Problem P.17

a)
Book::Book(const Book& obj) {
    // cout << "Copy Constructor called!\n";
    // (*this).title = obj.title;
    // (*this).pages = obj.pages;
    title = new char [30];
    strcpy(title, a.title);
    // default constructor -> title = a.title pointing to the same location, destructor destroys both objects!
    pages = a.pages;
} 

Problem P.18

#include <iostream>
#include <cmath>
#include <limits>
using namespace std;
class Complex {
    private:
        float real;  // real part
        float imag;  // imaginary part
    public:
        Complex();
        Complex(float, float = 0);
        double magnitude();
        void print();
        friend ostream& operator << (ostream &os, const Complex &a);
        bool operator >(const Complex &a);
        bool operator <(const Complex &a);

};
Complex::Complex(float a, float b){
    real=a;
    imag=b;
}
void Complex::print() {
    if (imag)
        cout << noshowpos << real << showpos << imag << "i" << endl;
    else
        cout << noshowpos << real << endl;
}
ostream& operator <<(ostream &os, const Complex &a){
    if (a.imag)
        os << noshowpos << a.real << showpos << a.imag<<"i"<<endl;
    else
        os << noshowpos << a.real << endl;
    return os;
}
bool Complex::operator > (const Complex &a){
    if (sqrt(real*real+imag*imag)>sqrt(a.real*a.real+a.imag*a.imag)) return true;
    return false;
}
bool Complex::operator < (const Complex &a){
    if (sqrt(real*real+imag*imag)<sqrt(a.real*a.real+a.imag*a.imag)) return true;
    return false;
}
int main(){
    Complex a(5,2);
    Complex b(6,8);
    cout<<a;
    cout<<b;
    cout<<"a>b? "<<(a>b?"YES":"NO")<<endl;
    cout<<"a<b? "<<(a<b?"YES":"NO")<<endl;
    return 0;
}

Problem P.19

class worker {

    private:
        int id;
        string Name;

    public:
        worker(int ID, string name)
        {
            id = ID;
            Name = name;
        }
        ~worker(){ cout << "Destructor called!\n"; }
        friend ostream& operator<<(ostream &out, const worker &W) {
            out << "The Worker with the ID " << W.id << " is " << W.Name << "." << endl;
            return out;
        }
};

Problem P.20

#include <iostream>
#include <string>
#include <cmath>

using namespace std;

class Object3D {
    private: 
        string name;
    
    public:
        Object3D(){ name = "3d_object"; }
        Object3D(string Name) { name = Name; }
		// virtual ~Object3D();
		virtual double volume() { return -1; };

};

class Sphere : public Object3D {
    private: 
        float radius;
    
    public:
        Sphere() : Object3D() { }
        Sphere(string a, float b) : Object3D(a){ radius = b; }
        ~Sphere() { cout << "Destructor called!\n"; }
		double volume() { double V = (4.0/3) * M_PI * radius * radius * radius; return V; }

};

class Cylinder : public Object3D {
    private: 
        float radius;
        float height;
    
    public:
        Cylinder() : Object3D() {}
        Cylinder(string a, double b, double c):Object3D(a){ radius = b; height = c; }
        ~Cylinder() { cout << "Destructor called!\n"; }
		double volume() { double V =  M_PI * radius * radius * height; return V;}

};

class RectPrism : public Object3D {
    private: 
        float width;
        float length;
        float height;
    
    public:
        RectPrism():Object3D() {}
        RectPrism(string Name, float Width, float Length, float Height) : Object3D(Name) { width = Width; length = Length; height = Height; }
		~RectPrism() { cout << "Destructor called!\n"; }
		double volume() { double V = width * length * height; return V;}

};

class Cube : public RectPrism {
    private: 
        float side;
    
    public:
        Cube():RectPrism() {}
        Cube(string Name, float Side) : RectPrism(Name, Side, Side, Side) { side = Side; }
		~Cube() { cout << "Destructor called!\n"; }
		double volume() { double V = side * side * side; return V;}

};

int main(int argc, char *argv[]) {
    Object3D *arr[5];
    arr[0] = new Sphere("sphere", 1.3);
    arr[1] = new RectPrism("rectprism", 2.0, 3.0, 4.0);
    arr[2] = new Cylinder("cylinder", 2.0, 1.3);
    arr[3] = new Cube("cube", 2.0);
    arr[4] = new RectPrism("rectprism2", 1.0, 2.0, 3.5);
    int i;
    for(i=0; i<5; i++)
    cout << arr[i]->volume() << endl;
    for(i=0; i<5; i++)
    delete arr[i];
    return 0;
}

Problem P.21

CH_230_A
TA destructor
Faculty destructor
Student destructor
Person destructor
TA destructor
Faculty destructor
Student destructor
Person destructor
TA destructor
Faculty destructor
Student destructor
Person destructor

Problem P.22

#include <iostream>
#include <stdexcept>
using namespace std;

double intDivEx (int numerator, int denominator) {
    if (denominator == 0)
        throw logic_error("Divide by zero exception");
    return a/b;
}
int main()
{
    int i = 42;

    try 
    { 
        cout << intDivEx (10, 0) << endl; 
    }

    catch (logic error &e) 
    {
        cout << e.what() << endl;
    }
    
}














